/*
 * This file is autogenerated with bcop:
 * The Compiz option code generator
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 */


#include <core/core.h>

#include "mategrid_options.h"

MategridOptions::MategridOptions () :
    mOptions (MategridOptions::OptionNum),
    mNotify (MategridOptions::OptionNum)
{
    unsigned int state;
    CompAction action;
    unsigned short color[4];

    // put_center_key
    mOptions[MategridOptions::PutCenterKey].setName ("put_center_key", CompOption::TypeKey);
    state = CompAction::StateAutoGrab;
    action = CompAction ();
    action.setState (state | CompAction::StateInitKey);
    action.keyFromString ("<Control><Alt>KP_5");
    mOptions[MategridOptions::PutCenterKey].value().set (action);
    screen->addAction (&mOptions[MategridOptions::PutCenterKey].value ().action ());

    // put_left_key
    mOptions[MategridOptions::PutLeftKey].setName ("put_left_key", CompOption::TypeKey);
    state = CompAction::StateAutoGrab;
    action = CompAction ();
    action.setState (state | CompAction::StateInitKey);
    action.keyFromString ("<Control><Alt>KP_4");
    mOptions[MategridOptions::PutLeftKey].value().set (action);
    screen->addAction (&mOptions[MategridOptions::PutLeftKey].value ().action ());

    // put_right_key
    mOptions[MategridOptions::PutRightKey].setName ("put_right_key", CompOption::TypeKey);
    state = CompAction::StateAutoGrab;
    action = CompAction ();
    action.setState (state | CompAction::StateInitKey);
    action.keyFromString ("<Control><Alt>KP_6");
    mOptions[MategridOptions::PutRightKey].value().set (action);
    screen->addAction (&mOptions[MategridOptions::PutRightKey].value ().action ());

    // put_top_key
    mOptions[MategridOptions::PutTopKey].setName ("put_top_key", CompOption::TypeKey);
    state = CompAction::StateAutoGrab;
    action = CompAction ();
    action.setState (state | CompAction::StateInitKey);
    action.keyFromString ("<Control><Alt>KP_8");
    mOptions[MategridOptions::PutTopKey].value().set (action);
    screen->addAction (&mOptions[MategridOptions::PutTopKey].value ().action ());

    // put_bottom_key
    mOptions[MategridOptions::PutBottomKey].setName ("put_bottom_key", CompOption::TypeKey);
    state = CompAction::StateAutoGrab;
    action = CompAction ();
    action.setState (state | CompAction::StateInitKey);
    action.keyFromString ("<Control><Alt>KP_2");
    mOptions[MategridOptions::PutBottomKey].value().set (action);
    screen->addAction (&mOptions[MategridOptions::PutBottomKey].value ().action ());

    // put_topleft_key
    mOptions[MategridOptions::PutTopleftKey].setName ("put_topleft_key", CompOption::TypeKey);
    state = CompAction::StateAutoGrab;
    action = CompAction ();
    action.setState (state | CompAction::StateInitKey);
    action.keyFromString ("<Control><Alt>KP_7");
    mOptions[MategridOptions::PutTopleftKey].value().set (action);
    screen->addAction (&mOptions[MategridOptions::PutTopleftKey].value ().action ());

    // put_topright_key
    mOptions[MategridOptions::PutToprightKey].setName ("put_topright_key", CompOption::TypeKey);
    state = CompAction::StateAutoGrab;
    action = CompAction ();
    action.setState (state | CompAction::StateInitKey);
    action.keyFromString ("<Control><Alt>KP_9");
    mOptions[MategridOptions::PutToprightKey].value().set (action);
    screen->addAction (&mOptions[MategridOptions::PutToprightKey].value ().action ());

    // put_bottomleft_key
    mOptions[MategridOptions::PutBottomleftKey].setName ("put_bottomleft_key", CompOption::TypeKey);
    state = CompAction::StateAutoGrab;
    action = CompAction ();
    action.setState (state | CompAction::StateInitKey);
    action.keyFromString ("<Control><Alt>KP_1");
    mOptions[MategridOptions::PutBottomleftKey].value().set (action);
    screen->addAction (&mOptions[MategridOptions::PutBottomleftKey].value ().action ());

    // put_bottomright_key
    mOptions[MategridOptions::PutBottomrightKey].setName ("put_bottomright_key", CompOption::TypeKey);
    state = CompAction::StateAutoGrab;
    action = CompAction ();
    action.setState (state | CompAction::StateInitKey);
    action.keyFromString ("<Control><Alt>KP_3");
    mOptions[MategridOptions::PutBottomrightKey].value().set (action);
    screen->addAction (&mOptions[MategridOptions::PutBottomrightKey].value ().action ());

    // put_maximize_key
    mOptions[MategridOptions::PutMaximizeKey].setName ("put_maximize_key", CompOption::TypeKey);
    state = CompAction::StateAutoGrab;
    action = CompAction ();
    action.setState (state | CompAction::StateInitKey);
    action.keyFromString ("<Control><Alt>KP_0");
    mOptions[MategridOptions::PutMaximizeKey].value().set (action);
    screen->addAction (&mOptions[MategridOptions::PutMaximizeKey].value ().action ());

    // put_restore_key
    mOptions[MategridOptions::PutRestoreKey].setName ("put_restore_key", CompOption::TypeKey);
    state = CompAction::StateAutoGrab;
    action = CompAction ();
    action.setState (state | CompAction::StateInitKey);
    action.keyFromString ("<Control><Alt>r");
    mOptions[MategridOptions::PutRestoreKey].value().set (action);
    screen->addAction (&mOptions[MategridOptions::PutRestoreKey].value ().action ());

    // top_left_corner_action
    mOptions[MategridOptions::TopLeftCornerAction].setName ("top_left_corner_action", CompOption::TypeInt);
    mOptions[MategridOptions::TopLeftCornerAction].rest ().set (0, 10);
    mOptions[MategridOptions::TopLeftCornerAction].value().set((int) 7);

    // top_edge_action
    mOptions[MategridOptions::TopEdgeAction].setName ("top_edge_action", CompOption::TypeInt);
    mOptions[MategridOptions::TopEdgeAction].rest ().set (0, 10);
    mOptions[MategridOptions::TopEdgeAction].value().set((int) 10);

    // top_right_corner_action
    mOptions[MategridOptions::TopRightCornerAction].setName ("top_right_corner_action", CompOption::TypeInt);
    mOptions[MategridOptions::TopRightCornerAction].rest ().set (0, 10);
    mOptions[MategridOptions::TopRightCornerAction].value().set((int) 9);

    // left_edge_action
    mOptions[MategridOptions::LeftEdgeAction].setName ("left_edge_action", CompOption::TypeInt);
    mOptions[MategridOptions::LeftEdgeAction].rest ().set (0, 10);
    mOptions[MategridOptions::LeftEdgeAction].value().set((int) 4);

    // right_edge_action
    mOptions[MategridOptions::RightEdgeAction].setName ("right_edge_action", CompOption::TypeInt);
    mOptions[MategridOptions::RightEdgeAction].rest ().set (0, 10);
    mOptions[MategridOptions::RightEdgeAction].value().set((int) 6);

    // bottom_left_corner_action
    mOptions[MategridOptions::BottomLeftCornerAction].setName ("bottom_left_corner_action", CompOption::TypeInt);
    mOptions[MategridOptions::BottomLeftCornerAction].rest ().set (0, 10);
    mOptions[MategridOptions::BottomLeftCornerAction].value().set((int) 1);

    // bottom_edge_action
    mOptions[MategridOptions::BottomEdgeAction].setName ("bottom_edge_action", CompOption::TypeInt);
    mOptions[MategridOptions::BottomEdgeAction].rest ().set (0, 10);
    mOptions[MategridOptions::BottomEdgeAction].value().set((int) 2);

    // bottom_right_corner_action
    mOptions[MategridOptions::BottomRightCornerAction].setName ("bottom_right_corner_action", CompOption::TypeInt);
    mOptions[MategridOptions::BottomRightCornerAction].rest ().set (0, 10);
    mOptions[MategridOptions::BottomRightCornerAction].value().set((int) 3);

    // snapoff_maximized
    mOptions[MategridOptions::SnapoffMaximized].setName ("snapoff_maximized", CompOption::TypeBool);
    mOptions[MategridOptions::SnapoffMaximized].value().set(false);

    // snapback_windows
    mOptions[MategridOptions::SnapbackWindows].setName ("snapback_windows", CompOption::TypeBool);
    mOptions[MategridOptions::SnapbackWindows].value().set(true);

    // left_edge_threshold
    mOptions[MategridOptions::LeftEdgeThreshold].setName ("left_edge_threshold", CompOption::TypeInt);
    mOptions[MategridOptions::LeftEdgeThreshold].rest ().set (0, 500);
    mOptions[MategridOptions::LeftEdgeThreshold].value().set((int) 5);

    // right_edge_threshold
    mOptions[MategridOptions::RightEdgeThreshold].setName ("right_edge_threshold", CompOption::TypeInt);
    mOptions[MategridOptions::RightEdgeThreshold].rest ().set (0, 500);
    mOptions[MategridOptions::RightEdgeThreshold].value().set((int) 5);

    // top_edge_threshold
    mOptions[MategridOptions::TopEdgeThreshold].setName ("top_edge_threshold", CompOption::TypeInt);
    mOptions[MategridOptions::TopEdgeThreshold].rest ().set (0, 500);
    mOptions[MategridOptions::TopEdgeThreshold].value().set((int) 5);

    // bottom_edge_threshold
    mOptions[MategridOptions::BottomEdgeThreshold].setName ("bottom_edge_threshold", CompOption::TypeInt);
    mOptions[MategridOptions::BottomEdgeThreshold].rest ().set (0, 500);
    mOptions[MategridOptions::BottomEdgeThreshold].value().set((int) 5);

    // draw_indicator
    mOptions[MategridOptions::DrawIndicator].setName ("draw_indicator", CompOption::TypeBool);
    mOptions[MategridOptions::DrawIndicator].value().set(true);

    // outline_color
    mOptions[MategridOptions::OutlineColor].setName ("outline_color", CompOption::TypeColor);
    color[0] = MAX (0, MIN (0xffff, 0x2f2f));
    color[1] = MAX (0, MIN (0xffff, 0x2f2f));
    color[2] = MAX (0, MIN (0xffff, 0x4f4f));
    color[3] = MAX (0, MIN (0xffff, 0x9f9f));
    mOptions[MategridOptions::OutlineColor].value().set(color);

    // fill_color
    mOptions[MategridOptions::FillColor].setName ("fill_color", CompOption::TypeColor);
    color[0] = MAX (0, MIN (0xffff, 0x2f2f));
    color[1] = MAX (0, MIN (0xffff, 0x2f2f));
    color[2] = MAX (0, MIN (0xffff, 0x4f4f));
    color[3] = MAX (0, MIN (0xffff, 0x4f4f));
    mOptions[MategridOptions::FillColor].value().set(color);

    // indicator_direction
    mOptions[MategridOptions::IndicatorDirection].setName ("indicator_direction", CompOption::TypeInt);
    mOptions[MategridOptions::IndicatorDirection].rest ().set (0, 1);
    mOptions[MategridOptions::IndicatorDirection].value().set((int) 0);

    // indicator_type
    mOptions[MategridOptions::IndicatorType].setName ("indicator_type", CompOption::TypeInt);
    mOptions[MategridOptions::IndicatorType].rest ().set (0, 0);
    mOptions[MategridOptions::IndicatorType].value().set((int) 0);

    // behind_window
    mOptions[MategridOptions::BehindWindow].setName ("behind_window", CompOption::TypeBool);
    mOptions[MategridOptions::BehindWindow].value().set(true);

}

MategridOptions::~MategridOptions ()
{
}


CompOption::Vector &
MategridOptions::getOptions ()
{
    return mOptions;
}

bool
MategridOptions::setOption (const CompString &name, CompOption::Value &value)
{
    CompOption   *o;
    unsigned int index;

    o = CompOption::findOption (mOptions, name, &index);

    if (!o)
        return false;

    switch (index)
    {
        case MategridOptions::PutCenterKey:
            if (o->set (value))
            {
                if (!mNotify[MategridOptions::PutCenterKey].empty ())
                    mNotify[MategridOptions::PutCenterKey] (o, MategridOptions::PutCenterKey);
                return true;
            }
            break;
        case MategridOptions::PutLeftKey:
            if (o->set (value))
            {
                if (!mNotify[MategridOptions::PutLeftKey].empty ())
                    mNotify[MategridOptions::PutLeftKey] (o, MategridOptions::PutLeftKey);
                return true;
            }
            break;
        case MategridOptions::PutRightKey:
            if (o->set (value))
            {
                if (!mNotify[MategridOptions::PutRightKey].empty ())
                    mNotify[MategridOptions::PutRightKey] (o, MategridOptions::PutRightKey);
                return true;
            }
            break;
        case MategridOptions::PutTopKey:
            if (o->set (value))
            {
                if (!mNotify[MategridOptions::PutTopKey].empty ())
                    mNotify[MategridOptions::PutTopKey] (o, MategridOptions::PutTopKey);
                return true;
            }
            break;
        case MategridOptions::PutBottomKey:
            if (o->set (value))
            {
                if (!mNotify[MategridOptions::PutBottomKey].empty ())
                    mNotify[MategridOptions::PutBottomKey] (o, MategridOptions::PutBottomKey);
                return true;
            }
            break;
        case MategridOptions::PutTopleftKey:
            if (o->set (value))
            {
                if (!mNotify[MategridOptions::PutTopleftKey].empty ())
                    mNotify[MategridOptions::PutTopleftKey] (o, MategridOptions::PutTopleftKey);
                return true;
            }
            break;
        case MategridOptions::PutToprightKey:
            if (o->set (value))
            {
                if (!mNotify[MategridOptions::PutToprightKey].empty ())
                    mNotify[MategridOptions::PutToprightKey] (o, MategridOptions::PutToprightKey);
                return true;
            }
            break;
        case MategridOptions::PutBottomleftKey:
            if (o->set (value))
            {
                if (!mNotify[MategridOptions::PutBottomleftKey].empty ())
                    mNotify[MategridOptions::PutBottomleftKey] (o, MategridOptions::PutBottomleftKey);
                return true;
            }
            break;
        case MategridOptions::PutBottomrightKey:
            if (o->set (value))
            {
                if (!mNotify[MategridOptions::PutBottomrightKey].empty ())
                    mNotify[MategridOptions::PutBottomrightKey] (o, MategridOptions::PutBottomrightKey);
                return true;
            }
            break;
        case MategridOptions::PutMaximizeKey:
            if (o->set (value))
            {
                if (!mNotify[MategridOptions::PutMaximizeKey].empty ())
                    mNotify[MategridOptions::PutMaximizeKey] (o, MategridOptions::PutMaximizeKey);
                return true;
            }
            break;
        case MategridOptions::PutRestoreKey:
            if (o->set (value))
            {
                if (!mNotify[MategridOptions::PutRestoreKey].empty ())
                    mNotify[MategridOptions::PutRestoreKey] (o, MategridOptions::PutRestoreKey);
                return true;
            }
            break;
        case MategridOptions::TopLeftCornerAction:
            if (o->set (value))
            {
                if (!mNotify[MategridOptions::TopLeftCornerAction].empty ())
                    mNotify[MategridOptions::TopLeftCornerAction] (o, MategridOptions::TopLeftCornerAction);
                return true;
            }
            break;
        case MategridOptions::TopEdgeAction:
            if (o->set (value))
            {
                if (!mNotify[MategridOptions::TopEdgeAction].empty ())
                    mNotify[MategridOptions::TopEdgeAction] (o, MategridOptions::TopEdgeAction);
                return true;
            }
            break;
        case MategridOptions::TopRightCornerAction:
            if (o->set (value))
            {
                if (!mNotify[MategridOptions::TopRightCornerAction].empty ())
                    mNotify[MategridOptions::TopRightCornerAction] (o, MategridOptions::TopRightCornerAction);
                return true;
            }
            break;
        case MategridOptions::LeftEdgeAction:
            if (o->set (value))
            {
                if (!mNotify[MategridOptions::LeftEdgeAction].empty ())
                    mNotify[MategridOptions::LeftEdgeAction] (o, MategridOptions::LeftEdgeAction);
                return true;
            }
            break;
        case MategridOptions::RightEdgeAction:
            if (o->set (value))
            {
                if (!mNotify[MategridOptions::RightEdgeAction].empty ())
                    mNotify[MategridOptions::RightEdgeAction] (o, MategridOptions::RightEdgeAction);
                return true;
            }
            break;
        case MategridOptions::BottomLeftCornerAction:
            if (o->set (value))
            {
                if (!mNotify[MategridOptions::BottomLeftCornerAction].empty ())
                    mNotify[MategridOptions::BottomLeftCornerAction] (o, MategridOptions::BottomLeftCornerAction);
                return true;
            }
            break;
        case MategridOptions::BottomEdgeAction:
            if (o->set (value))
            {
                if (!mNotify[MategridOptions::BottomEdgeAction].empty ())
                    mNotify[MategridOptions::BottomEdgeAction] (o, MategridOptions::BottomEdgeAction);
                return true;
            }
            break;
        case MategridOptions::BottomRightCornerAction:
            if (o->set (value))
            {
                if (!mNotify[MategridOptions::BottomRightCornerAction].empty ())
                    mNotify[MategridOptions::BottomRightCornerAction] (o, MategridOptions::BottomRightCornerAction);
                return true;
            }
            break;
        case MategridOptions::SnapoffMaximized:
            if (o->set (value))
            {
                if (!mNotify[MategridOptions::SnapoffMaximized].empty ())
                    mNotify[MategridOptions::SnapoffMaximized] (o, MategridOptions::SnapoffMaximized);
                return true;
            }
            break;
        case MategridOptions::SnapbackWindows:
            if (o->set (value))
            {
                if (!mNotify[MategridOptions::SnapbackWindows].empty ())
                    mNotify[MategridOptions::SnapbackWindows] (o, MategridOptions::SnapbackWindows);
                return true;
            }
            break;
        case MategridOptions::LeftEdgeThreshold:
            if (o->set (value))
            {
                if (!mNotify[MategridOptions::LeftEdgeThreshold].empty ())
                    mNotify[MategridOptions::LeftEdgeThreshold] (o, MategridOptions::LeftEdgeThreshold);
                return true;
            }
            break;
        case MategridOptions::RightEdgeThreshold:
            if (o->set (value))
            {
                if (!mNotify[MategridOptions::RightEdgeThreshold].empty ())
                    mNotify[MategridOptions::RightEdgeThreshold] (o, MategridOptions::RightEdgeThreshold);
                return true;
            }
            break;
        case MategridOptions::TopEdgeThreshold:
            if (o->set (value))
            {
                if (!mNotify[MategridOptions::TopEdgeThreshold].empty ())
                    mNotify[MategridOptions::TopEdgeThreshold] (o, MategridOptions::TopEdgeThreshold);
                return true;
            }
            break;
        case MategridOptions::BottomEdgeThreshold:
            if (o->set (value))
            {
                if (!mNotify[MategridOptions::BottomEdgeThreshold].empty ())
                    mNotify[MategridOptions::BottomEdgeThreshold] (o, MategridOptions::BottomEdgeThreshold);
                return true;
            }
            break;
        case MategridOptions::DrawIndicator:
            if (o->set (value))
            {
                if (!mNotify[MategridOptions::DrawIndicator].empty ())
                    mNotify[MategridOptions::DrawIndicator] (o, MategridOptions::DrawIndicator);
                return true;
            }
            break;
        case MategridOptions::OutlineColor:
            if (o->set (value))
            {
                if (!mNotify[MategridOptions::OutlineColor].empty ())
                    mNotify[MategridOptions::OutlineColor] (o, MategridOptions::OutlineColor);
                return true;
            }
            break;
        case MategridOptions::FillColor:
            if (o->set (value))
            {
                if (!mNotify[MategridOptions::FillColor].empty ())
                    mNotify[MategridOptions::FillColor] (o, MategridOptions::FillColor);
                return true;
            }
            break;
        case MategridOptions::IndicatorDirection:
            if (o->set (value))
            {
                if (!mNotify[MategridOptions::IndicatorDirection].empty ())
                    mNotify[MategridOptions::IndicatorDirection] (o, MategridOptions::IndicatorDirection);
                return true;
            }
            break;
        case MategridOptions::IndicatorType:
            if (o->set (value))
            {
                if (!mNotify[MategridOptions::IndicatorType].empty ())
                    mNotify[MategridOptions::IndicatorType] (o, MategridOptions::IndicatorType);
                return true;
            }
            break;
        case MategridOptions::BehindWindow:
            if (o->set (value))
            {
                if (!mNotify[MategridOptions::BehindWindow].empty ())
                    mNotify[MategridOptions::BehindWindow] (o, MategridOptions::BehindWindow);
                return true;
            }
            break;
        default:
            break;
    }
    return false;

}

